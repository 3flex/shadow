import org.gradle.wrapper.Download
import org.gradle.wrapper.GradleUserHomeLookup
import org.gradle.wrapper.Install
import org.gradle.wrapper.PathAssembler
import org.gradle.wrapper.WrapperConfiguration
import org.gradle.wrapper.WrapperExecutor

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.0"
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.2"
        classpath "com.bluepapa32:gradle-watch-plugin:0.1.5"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:0.2.1"
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'org.asciidoctor.convert'
apply plugin: "com.bluepapa32.watch"
apply plugin: "org.kordamp.gradle.livereload"

apply from: file('gradle/docs.gradle')
apply from: file('gradle/publish.gradle')

repositories {
    mavenLocal()
    jcenter()
    maven {
        url 'http://dl.bintray.com/johnrengelman/gradle-plugins'
    }
}

sourceSets {
    testUtils
}

dependencies {

    compile localGroovy()
    compile gradleApi()
    compile 'org.jdom:jdom2:2.0.5'
    compile 'org.ow2.asm:asm:5.0.3'
    compile 'org.ow2.asm:asm-commons:5.0.3'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.ant:ant:1.9.4'
    compile 'org.codehaus.plexus:plexus-utils:2.0.6'
    compile 'org.codehaus.groovy:groovy-backports-compat23:2.4.4'

    testUtilsCompile localGroovy()
    testUtilsCompile gradleApi()
    testUtilsCompile 'com.github.jengelman.gradle.plugins:gradle-test-kit:0.3'

    testCompile configurations.testUtilsCompile
    testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude module: 'groovy-all'
    }
    testCompile 'xmlunit:xmlunit:1.3'
}

test {
    if (System.env.CI == 'true') {
        testLogging.showStandardStreams = true
    }
}

jar {
    from rootProject.file('LICENSE')
    from rootProject.file('NOTICE')
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.6'
    }
    module {
        testSourceDirs += sourceSets.testUtils.allSource.srcDirs
        scopes.TEST.plus += [configurations.testUtilsRuntime]
    }
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

sourceSets.test.compileClasspath += sourceSets.testUtils.output
sourceSets.test.runtimeClasspath += sourceSets.testUtils.output

asciidoctor {
    def source = project.sourceSets.main.java.srcDirs[0]

    // add extra inputs since these include files that are included
    inputs.dir source

    attributes	'build-gradle': file('build.gradle'),
            'sourcedir': source,
            'endpoint-url': 'http://example.org',

            'source-highlighter' : 'coderay',
            'imagesdir':'images',
            'toc':'left',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'',
            'idseparator':'-',
            'docinfo1':'true'
}

watch {
    asciidoc {
        files fileTree('src')
        tasks 'asciidoctor'
    }
}

liveReload {
    docRoot asciidoctor.outputDir.canonicalPath
}

task installWrappers << {
    WrapperExecutor wrapperExecutor = WrapperExecutor.forWrapperPropertiesFile(file('gradle/wrapper/gradle-wrapper.properties'), System.out)
    ['1.11', '1.12', '2.0', '2.1', '2.2', '2.3', '2.4', '2.5'].each {
        WrapperConfiguration config = wrapperExecutor.config
        config.setDistribution(new URI("https://services.gradle.org/distributions/gradle-$it-bin.zip"))
        Install install = new Install(new Download("gradlew", it),
                new PathAssembler(GradleUserHomeLookup.gradleUserHome()))
        install.createDist(config)
    }
}
