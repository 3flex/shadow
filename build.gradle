import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
    id 'groovy'
    id 'project-report'
    id 'idea'
    id 'java-gradle-plugin'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.16.0'
    id 'org.ajoberstar.git-publish' version '4.1.1'
    id 'com.github.node-gradle.node' version '3.0.0'
}

// Remove the gradleApi so it isn't merged into the jar file.
configurations.named(JavaPlugin.API_CONFIGURATION_NAME) {
    dependencies.remove(project.dependencies.gradleApi())
}

gradlePlugin {
    automatedPublishing = false
}

apply plugin: 'com.github.johnrengelman.shadow'

apply from: file('gradle/docs.gradle')
apply from: file('gradle/publish.gradle')
apply from: file('gradle/vuepress.gradle')
apply from: file('gradle/ghPages.gradle')
apply from: file('gradle/dependencies.gradle')

repositories {
    gradlePluginPortal()
    mavenCentral()
}

test {
    useJUnitPlatform()

    if (System.env.CI == 'true') {
        testLogging.showStandardStreams = true
        minHeapSize "1g"
        maxHeapSize "1g"
    }

    systemProperty 'java.io.tmpdir', buildDir.absolutePath
}

jar {
    from rootProject.file('LICENSE')
    from rootProject.file('NOTICE')
}

jar.enabled = false

shadowJar {
    archiveClassifier = ''
}

idea {
    project {
        languageLevel = '1.8'
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.register('downloadDependencies', Exec) {
    dependsOn configurations.testRuntimeClasspath
    commandLine 'echo', 'Downloaded all dependencies'
}

tasks.named('build') { dependsOn tasks.named('shadowJar') }

tasks.withType(JavaCompile).configureEach {
    // This will be the default in Gradle 5.0
    if (!options.compilerArgs.contains("-processor")) {
        options.compilerArgs << '-proc:none'
    }
}

tasks.withType(GroovyCompile).configureEach {
    // This will be the default in Gradle 5.0
    if (!options.compilerArgs.contains("-processor")) {
        options.compilerArgs << '-proc:none'
    }
}

tasks.register('relocateShadowJar', ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

tasks.named('shadowJar') { dependsOn tasks.relocateShadowJar }
