import org.gradle.wrapper.Download
import org.gradle.wrapper.GradleUserHomeLookup
import org.gradle.wrapper.Install
import org.gradle.wrapper.PathAssembler
import org.gradle.wrapper.WrapperConfiguration
import org.gradle.wrapper.WrapperExecutor

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.0"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:0.7.3"
    }
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'project-report'
apply plugin: 'org.asciidoctor.gradle.asciidoctor'

apply from: file('gradle/docs.gradle')
apply from: file('gradle/publish.gradle')

repositories {
    jcenter()
    maven {
        url 'http://dl.bintray.com/johnrengelman/gradle-plugins'
    }
}

sourceSets {
    testUtils
}

dependencies {

    compile localGroovy()
    compile gradleApi()
    compile 'org.jdom:jdom2:2.0.5'
    compile 'org.ow2.asm:asm:5.0.3'
    compile 'org.ow2.asm:asm-commons:5.0.3'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.ant:ant:1.9.4'

    testUtilsCompile localGroovy()
    testUtilsCompile gradleApi()
    testUtilsCompile 'com.github.jengelman.gradle.plugins:gradle-test-kit:0.2'

    testCompile configurations.testUtilsCompile
    testCompile("org.spockframework:spock-core:0.7-groovy-1.8") {
        exclude module: 'groovy-all'
    }
    testCompile 'xmlunit:xmlunit:1.3'
}

test {
    if (System.env.CI == 'true') {
        testLogging.showStandardStreams = true
    }
}

jar {
    from rootProject.file('LICENSE')
    from rootProject.file('NOTICE')
}

idea {
    project {
        jdkName = '1.7'
        languageLevel = '1.6'
    }
    module {
        testSourceDirs += sourceSets.testUtils.allSource.srcDirs
        scopes.TEST.plus += configurations.testUtilsRuntime
    }
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

sourceSets.test.compileClasspath += sourceSets.testUtils.output
sourceSets.test.runtimeClasspath += sourceSets.testUtils.output

asciidoctor {
    baseDir = project.file('src/asciidoc')
    options = [
        attributes: [
            toc                     : 'left',
            doctype                 : 'book',
            icons                   : 'font',
            encoding                : 'utf-8',
            sectlink                : true,
            sectanchors             : true,
            numbered                : true,
            linkattrs               : true,
            imagesdir               : 'images',
            linkcss                 : true,
//            stylesheet              : 'css/style.css',
        ]
    ]
}

task installWrappers << {
    WrapperExecutor wrapperExecutor = WrapperExecutor.forWrapperPropertiesFile(file('gradle/wrapper/gradle-wrapper.properties'), System.out)
    ['1.11', '1.12', '2.0', '2.1', '2.2'].each {
        WrapperConfiguration config = wrapperExecutor.config
        config.setDistribution(new URI("https://services.gradle.org/distributions/gradle-$it-bin.zip"))
        Install install = new Install(new Download("gradlew", it),
                new PathAssembler(GradleUserHomeLookup.gradleUserHome()))
        install.createDist(config)
    }
}

