import org.gradle.api.plugins.shadow.ShadowPlugin

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath project(':plugin')
        classpath 'jdom:jdom:1.1'
        classpath 'asm:asm:3.3.1'
        classpath 'asm:asm-commons:3.3.1'
    }
}

subprojects { subproj ->

    repositories {
        maven {
            name "Test Local"
            url "file://${subproj.file('repo').path}"
        }
    }

    dependencies {
        compile project(':plugin')
    }

    apply plugin: ShadowPlugin

    subproj.ext.testTasks = 'shadow'

    task integTestSetup << {
        executeScript(subproj.file('setup.groovy'), subproj)
    }

    task integTestTask(dependsOn: ['integTestSetup'] + testTasks.split(',')*.trim())

    testTasks.split(',')*.trim().each { testTask ->
        subproj.tasks."$testTask".with {
            addSetupDependency(dependsOn, integTestSetup)
            dependsOn integTestSetup
        }
    }

    task integTestVerify(dependsOn: ['integTestSetup', 'integTestTask']) <<  {
        executeScript(subproj.file('verify.groovy'), subproj)
    }

    task integTest(dependsOn: ['integTestSetup', 'integTestTask', 'integTestVerify'])
}

void addSetupDependency(Set dependencies, Task setup) {
    dependencies.each { dep ->
        if (dep instanceof Collection) {
            addSetupDependency(dep, setup)
        }
        if(dep instanceof Task && dep != setup) {
            addSetupDependency(dep.dependsOn, setup)
            dep.dependsOn setup
        }
    }
}

void executeScript(File f, def project) {
    if(f.exists()) {
        def binding = new Binding()
        GroovyShell shell = new GroovyShell(binding)

        Closure c = shell.evaluate(f)
        c.delegate = project
        c.setResolveStrategy(Closure.OWNER_FIRST)
        c(project)
    }
}
